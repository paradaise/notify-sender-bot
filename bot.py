import telebot
import time
import threading
from telebot import types
from tg_token import TOKEN
import re


bot = telebot.TeleBot(TOKEN)
tasks = {}

main_menu = ('‚ö°Ô∏è–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É','üÜò–ü–æ–º–æ—â—å')
settings_menu = ('üëÄ–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á—É', 'üë®‚Äçüíª–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É', 'üêá–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', '‚èπ–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', 'üÜò–ü–æ–º–æ—â—å')
edit_menu = ('üìù–ü–æ–º–µ–Ω—è—Ç—å —Ç–µ–∫—Å—Ç', '‚è∞–ü–æ–º–µ–Ω—è—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª', 'üìã–ü–æ–º–µ–Ω—è—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø', 'üîô–ù–∞–∑–∞–¥')

stop_event = threading.Event()

def keyboard(menu):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for i in range(0, len(menu), 2):
        markup.add(*[types.KeyboardButton(item)
                      for item in menu[i:i+2]])
    return markup

def load_trusted_users(filename):
    with open(filename, 'r') as file:
        return [line.strip() for line in file]

TRUSTED_USERS = load_trusted_users('trusted_users.txt')

@bot.message_handler(func=lambda message: message.from_user.username not in TRUSTED_USERS)
def handle_untrusted_user(message: telebot.types.Message):
    bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")

@bot.message_handler(commands=['start'])
def start(message):
    bot.reply_to(message, '–Ø –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—ã. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚ö°Ô∏è–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É" –∏–ª–∏ "üÜò–ü–æ–º–æ—â—å"', reply_markup=keyboard(main_menu))

@bot.message_handler(content_types=['text'])
def get_information(message):
    if message.chat.type == 'private':
        if message.text == '‚ö°Ô∏è–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É':
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —Ä–∞—Å—Å—ã–ª–∞—Ç—å—Å—è:")
            bot.register_next_step_handler(message, get_notify)
        elif message.text == 'üÜò–ü–æ–º–æ—â—å':
            bot.send_message(message.chat.id, "–Ø –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é. –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.\n–ß—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç?–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ:<b>https://t.me/wa55up</b>",reply_markup="html")
        elif message.text == 'üëÄ–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á—É':
            show_notify(message)
        elif message.text == 'üë®‚Äçüíª–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É':
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=keyboard(edit_menu))
        elif message.text == 'üêá–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É':
            start_sending(message)
        elif message.text == '‚èπ–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É':
            stop_sending(message)
        elif message.text == 'üìù–ü–æ–º–µ–Ω—è—Ç—å —Ç–µ–∫—Å—Ç':
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:")
            bot.register_next_step_handler(message, update_notify)
        elif message.text == '‚è∞–ü–æ–º–µ–Ω—è—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª':
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ (—á–∏—Å–ª–æ–º) –≤ –º–∏–Ω—É—Ç–∞—Ö:")
            bot.register_next_step_handler(message, update_delay)
        elif message.text == 'üìã–ü–æ–º–µ–Ω—è—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø':
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –Ω–æ–≤—ã–µ id –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏\n(id –≥—Ä—É–ø–ø—ã —ç—Ç–æ —á–∏—Å–ª–æ –∏–∑ —Ç–∏—Ä–µ –∏ 13 —Ü–∏—Ñ—Ä.\n<i>–ü—Ä–∏–º–µ—Ä:</i><b>-1234567890123</b>\n<i>–ü–æ–ª—É—á–∏—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ —Ç—É—Ç:</i>\n<b>https://t.me/username_to_id_bot)</b>\n–ò–ª–∏ –≤ URL-—Å—Ç—Ä–æ–∫–µ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ –≤–µ–± –≤–µ—Ä—Å–∏—é –¢–ì",parse_mode="html")
            bot.register_next_step_handler(message, update_links)
        elif message.text == 'üîô–ù–∞–∑–∞–¥':
            bot.send_message(message.chat.id, "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=keyboard(settings_menu))
        
def get_notify(message):
    global notify
    notify = message.text
    bot.send_message(message.chat.id, f'–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: <b>{notify}</b>', parse_mode="html")
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ (—á–∏—Å–ª–æ–º) –≤ –º–∏–Ω—É—Ç–∞—Ö:")
    bot.register_next_step_handler(message, get_delay)

def get_delay(message):
    try:
        global delay
        delay = int(message.text)
        bot.send_message(message.chat.id, f'–í–∞—à –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏: <b>{delay}</b> –º–∏–Ω—É—Ç', parse_mode="html")
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ id –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏\n(id –≥—Ä—É–ø–ø—ã —ç—Ç–æ —á–∏—Å–ª–æ –∏–∑ —Ç–∏—Ä–µ –∏ 13 —Ü–∏—Ñ—Ä.\n<i>–ü—Ä–∏–º–µ—Ä:</i><b>-1234567890123</b>\n<i>–ü–æ–ª—É—á–∏—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ —Ç—É—Ç:</i>\n<b>https://t.me/username_to_id_bot)</b>\n–ò–ª–∏ –≤ URL-—Å—Ç—Ä–æ–∫–µ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ –≤–µ–± –≤–µ—Ä—Å–∏—é –¢–ì",parse_mode="html")
        bot.register_next_step_handler(message, get_links)
    except ValueError:
        bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è(—á–∏—Å–ª–æ–º) –≤ –º–∏–Ω—É—Ç–∞—Ö')
        bot.register_next_step_handler(message, get_delay)

def get_links(message):
    global links
    links = message.text.splitlines()
    links_checker(message,links,'get')
    
def links_checker(message,links:list,flag):
    if not links:
        bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫ ID –≥—Ä—É–ø–ø –ø—É—Å—Ç.', parse_mode="html")
        bot.register_next_step_handler(message, get_links)
        return
    
    pattern = re.compile(r'^-\d{13}$')
    success = False
    for link in links:
        if pattern.match(link):
            global formatted_links
            formatted_links = '\n'.join([f'{i+1}) {link}' for i, link in enumerate(links)])
            if not success:
                if flag == 'get':
                    bot.send_message(message.chat.id, f'ID –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: \n<b>{formatted_links}</b>', parse_mode="html")
                    create_task(message.chat.id)
                elif flag == 'update':
                    bot.send_message(message.chat.id, f'–ù–æ–≤—ã–µ ID –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: \n<b>{formatted_links}</b>', parse_mode="html")
                    bot.send_message(message.chat.id, "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=keyboard(settings_menu))
                success = True
        else:
            bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≥—Ä—É–ø–ø. ID –¥–æ–ª–∂–Ω—ã –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å "-" –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 13 —Ü–∏—Ñ—Ä.', parse_mode="html")
            bot.register_next_step_handler(message, get_links)
            return
        
def create_task(chat_id):
    try:
        global tasks
        tasks = {
            "msg": notify,
            "delay": delay,
            "groups": links
        }
        bot.send_message(chat_id, '–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!', parse_mode="html")
        bot.send_message(chat_id, "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=keyboard(settings_menu))
    except:
        bot.send_message(chat_id, '–ó–∞–¥–∞—á–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!', parse_mode="html")

def update_notify(message):
    global notify
    notify = message.text
    tasks["msg"] = notify
    bot.send_message(message.chat.id, f'–í–∞—à–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: <b>{notify}</b>', parse_mode="html")
    bot.send_message(message.chat.id, "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=keyboard(settings_menu))

def update_delay(message):
    try:
        global delay
        delay = int(message.text)
        tasks["delay"] = delay
        bot.send_message(message.chat.id, f'–í–∞—à –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏: <b>{delay}</b> –º–∏–Ω—É—Ç', parse_mode="html")
        bot.send_message(message.chat.id, "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=keyboard(settings_menu))
    except ValueError:
        bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∏—Å–ª–æ–º')
        bot.register_next_step_handler(message, update_delay)

def update_links(message):
    global links
    links = message.text.splitlines()
    try:
        links_checker(message,links,'update')
        tasks["groups"] = links
    except:
        bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!', parse_mode="html")
    
def show_notify(message):
    required_fields = ["msg", "delay", "groups"]
    empty_fields = [field for field in required_fields if not tasks.get(field)]

    if empty_fields:
        bot.send_message(message.chat.id, 
            f'–í—ã –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è: {", ".join(empty_fields)}')
    elif len(tasks) == 3:
        bot.send_message(message.chat.id, 
            f'–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n'
            f'<i>–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</i> <b>{tasks["msg"]}</b>\n'
            f'<i>–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏:</i> <b>{tasks["delay"]}</b>\n'
            f'<i>–ì—Ä—É–ø–ø—ã:\n</i> <b>{formatted_links}</b>'
            , parse_mode="html")

def send_notice():
    while not stop_event.is_set():
        for group_id in tasks["groups"]:
            bot.send_message(group_id, tasks["msg"])
        time.sleep(tasks["delay"] * 60)
      
def start_sending(message):
    global stop_event
    stop_event.clear()
    
    if len(tasks) != 3:
        bot.send_message(message.chat.id,'–í—ã –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –Ω–µ –≤—Å–µ –ø–æ–ª—è(–∏—Ö 3),–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ,–∏–Ω—Ç–µ—Ä–≤–∞–ª,–∏ —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø.–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á—É –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ')

    else:
        bot.send_message(message.chat.id, '–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞!', parse_mode="html")
        threading.Thread(target=send_notice).start()

def stop_sending(message):
    global stop_event
    stop_event.set()
    bot.send_message(message.chat.id, '–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!', parse_mode="html")

bot.polling(non_stop=True)