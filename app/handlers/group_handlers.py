import re
from telebot import types
from app.keyboards import keyboard, settings_menu, groups_edit_menu, edit_menu, back_menu
import app.state as state
from app.handlers.task_handlers import links_checker

def get_group_info(bot, group_id):
    try:
        chat = bot.get_chat(group_id)
        title = chat.title
        return f"<b>{title}</b> (<code>{group_id}</code>)"
    except Exception:
        return f"–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (<code>{group_id}</code>)"

def get_groups_list_text(bot, groups):
    if not groups:
        return "–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç."
    
    group_infos = [get_group_info(bot, group_id) for group_id in groups]
    
    return "<b>–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:</b>\n" + '\n'.join([f'{i+1}) {info}' for i, info in enumerate(group_infos)])

def register_group_handlers(bot):
    @bot.message_handler(func=lambda message: message.text == 'üìã–ü–æ–º–µ–Ω—è—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø')
    def change_groups_menu(message):
        if message.chat.type == 'private':
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤:", reply_markup=keyboard(groups_edit_menu))

    @bot.message_handler(func=lambda message: message.text == '‚ûï–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—ã')
    def add_groups_start(message):
        if message.chat.type == 'private':
            prompt_add_groups(message, bot)

    @bot.message_handler(func=lambda message: message.text == '‚ûñ–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—ã')
    def delete_group_start(message):
        if message.chat.type == 'private':
            prompt_delete_group(message, bot)

    @bot.message_handler(func=lambda message: message.text == 'üìù–ó–∞–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫')
    def replace_groups_start(message):
        if message.chat.type == 'private':
            prompt_replace_groups(message, bot)

    @bot.message_handler(func=lambda message: message.text == 'üîô–ù–∞–∑–∞–¥' and message.chat.type == 'private')
    def back_to_settings(message):
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=keyboard(edit_menu))

def prompt_replace_groups(message, bot):
    groups_text = get_groups_list_text(bot, state.tasks.get("groups", []))
    bot.send_message(message.chat.id, groups_text, parse_mode="html")
    
    replace_prompt = (
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –Ω–æ–≤—ã–µ ID –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏, —á—Ç–æ–±—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫.\n"
        "(<i>–ü—Ä–∏–º–µ—Ä:</i> <code>-1234567890123</code>)\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>üîô–ù–∞–∑–∞–¥</b> –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    bot.send_message(message.chat.id, replace_prompt, parse_mode="html", reply_markup=keyboard(back_menu))
    bot.register_next_step_handler(message, update_links, bot)

def update_links(message, bot):
    if message.text == 'üîô–ù–∞–∑–∞–¥' or message.text == '/cancel':
        bot.send_message(message.chat.id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboard(groups_edit_menu))
        return
        
    links = message.text.splitlines()
    if links_checker(message, bot, links, 'update'):
        state.tasks["groups"] = links
        bot.send_message(message.chat.id, "‚úÖ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.", reply_markup=keyboard(groups_edit_menu))
    else:
        bot.send_message(message.chat.id, "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ üîô–ù–∞–∑–∞–¥ –¥–ª—è –æ—Ç–º–µ–Ω—ã.", parse_mode="html")
        bot.register_next_step_handler(message, update_links, bot)

def prompt_add_groups(message, bot):
    groups_text = get_groups_list_text(bot, state.tasks.get("groups", []))
    bot.send_message(message.chat.id, groups_text, parse_mode="html")
    
    add_prompt = (
        "–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n"
        "(<i>–ü—Ä–∏–º–µ—Ä:</i> <code>-1234567890123</code>)\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>üîô–ù–∞–∑–∞–¥</b> –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    bot.send_message(message.chat.id, add_prompt, parse_mode="html", reply_markup=keyboard(back_menu))
    bot.register_next_step_handler(message, add_groups, bot)

def add_groups(message, bot):
    if message.text == 'üîô–ù–∞–∑–∞–¥' or message.text == '/cancel':
        bot.send_message(message.chat.id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboard(groups_edit_menu))
        return

    new_links_raw = message.text.splitlines()
    if not new_links_raw or not any(link.strip() for link in new_links_raw):
        bot.send_message(message.chat.id, '‚ùå –í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>üîô–ù–∞–∑–∞–¥</b> –¥–ª—è –æ—Ç–º–µ–Ω—ã.')
        bot.register_next_step_handler(message, add_groups, bot)
        return

    pattern = re.compile(r'^-\d+$')
    valid_new_links = []
    invalid_links = []
    for link in new_links_raw:
        if pattern.match(link.strip()):
            valid_new_links.append(link.strip())
        else:
            invalid_links.append(link)
    
    if invalid_links:
        error_message = (
            'üö´ <b>–ß–∞—Å—Ç—å ID –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.</b>\n\n'
            'ID –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å ¬´-¬ª –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.\n\n'
            '–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω—ã:\n' + 
            '\n'.join(f'‚Ä¢ <code>{link}</code>' for link in invalid_links) +
            '\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID –µ—â–µ —Ä–∞–∑, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>üîô–ù–∞–∑–∞–¥</b> –¥–ª—è –æ—Ç–º–µ–Ω—ã.'
        )
        bot.send_message(message.chat.id, error_message, parse_mode="html")
        bot.register_next_step_handler(message, add_groups, bot)
        return

    if "groups" not in state.tasks or not state.tasks["groups"]:
        state.tasks["groups"] = []
    
    added_count = 0
    duplicate_count = 0
    for link in valid_new_links:
        if link not in state.tasks["groups"]:
            state.tasks["groups"].append(link)
            added_count += 1
        else:
            duplicate_count += 1
            
    feedback_message = ""
    if added_count > 0:
        feedback_message += f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {added_count}.\n"
    if duplicate_count > 0:
        feedback_message += f"‚ÑπÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicate_count}."
    
    if not feedback_message:
        feedback_message = "‚ÑπÔ∏è –í—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ ID —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ."

    bot.send_message(message.chat.id, feedback_message, reply_markup=keyboard(groups_edit_menu))

def prompt_delete_group(message, bot):
    groups = state.tasks.get("groups")
    if not groups:
        bot.send_message(message.chat.id, "‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç, —É–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ.", reply_markup=keyboard(groups_edit_menu))
        return

    groups_text = get_groups_list_text(bot, groups)
    delete_prompt = (
        f'{groups_text}\n\n'
        '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å. –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ üîô –ù–∞–∑–∞–¥ –¥–ª—è –æ—Ç–º–µ–Ω—ã.'
    )
    bot.send_message(message.chat.id, delete_prompt, parse_mode="html", reply_markup=keyboard(back_menu))
    bot.register_next_step_handler(message, process_group_deletion, bot)

def process_group_deletion(message, bot):
    if message.text == 'üîô–ù–∞–∑–∞–¥' or message.text == '/cancel':
        bot.send_message(message.chat.id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboard(groups_edit_menu))
        return

    try:
        group_index_to_delete = int(message.text) - 1
        if 0 <= group_index_to_delete < len(state.tasks["groups"]):
            deleted_group = state.tasks["groups"].pop(group_index_to_delete)
            bot.send_message(message.chat.id, f'‚úÖ –ö–∞–Ω–∞–ª <code>{deleted_group}</code> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.', parse_mode="html", reply_markup=keyboard(groups_edit_menu))
        else:
            bot.send_message(message.chat.id, '‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.\n\n–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>üîô–ù–∞–∑–∞–¥</b> –¥–ª—è –æ—Ç–º–µ–Ω—ã.')
            bot.register_next_step_handler(message, process_group_deletion, bot)
    except (ValueError, IndexError):
        bot.send_message(message.chat.id, '‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞.\n\n–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>üîô–ù–∞–∑–∞–¥</b> –¥–ª—è –æ—Ç–º–µ–Ω—ã.')
        bot.register_next_step_handler(message, process_group_deletion, bot) 