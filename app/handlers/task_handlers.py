import re
from telebot import types
from app.keyboards import keyboard, settings_menu, main_menu, edit_menu, back_menu
import app.state as state

def register_task_handlers(bot):
    @bot.message_handler(commands=['show_task'])
    def show_task_command(message):
        if message.chat.type == 'private':
            show_notify(message, bot)

    @bot.message_handler(func=lambda message: message.text == '‚ö°Ô∏è–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É')
    def create_task_start(message):
        if message.chat.type == 'private':
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —Ä–∞—Å—Å—ã–ª–∞—Ç—å—Å—è.\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel", parse_mode="html")
            bot.register_next_step_handler(message, get_notify, bot)

    @bot.message_handler(func=lambda message: message.text == 'üëÄ–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á—É')
    def show_task(message):
        if message.chat.type == 'private':
            show_notify(message, bot)

    @bot.message_handler(func=lambda message: message.text == 'üìù–ü–æ–º–µ–Ω—è—Ç—å —Ç–µ–∫—Å—Ç')
    def change_text_start(message):
        if message.chat.type == 'private':
            msg = state.tasks.get("msg", "–Ω–µ –∑–∞–¥–∞–Ω–æ")
            bot.send_message(message.chat.id, f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n<b>{msg}</b>", parse_mode="html")
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:", reply_markup=keyboard(back_menu))
            bot.register_next_step_handler(message, update_notify, bot)
            
    @bot.message_handler(func=lambda message: message.text == '‚è∞–ü–æ–º–µ–Ω—è—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª')
    def change_interval_start(message):
        if message.chat.type == 'private':
            delay = state.tasks.get("delay", "–Ω–µ –∑–∞–¥–∞–Ω–æ")
            bot.send_message(message.chat.id, f"–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: <b>{delay}</b> –º–∏–Ω—É—Ç.", parse_mode="html")
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ (—á–∏—Å–ª–æ–º) –≤ –º–∏–Ω—É—Ç–∞—Ö:", reply_markup=keyboard(back_menu))
            bot.register_next_step_handler(message, update_delay, bot)


def get_notify(message, bot):
    if message.text == '/cancel':
        bot.send_message(message.chat.id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboard(main_menu))
        return
    
    state.tasks['msg'] = message.text
    bot.send_message(message.chat.id, f'üìù –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n<b>{message.text}</b>', parse_mode="html")
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ).\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel", parse_mode="html")
    bot.register_next_step_handler(message, get_delay, bot)

def get_delay(message, bot):
    if message.text == '/cancel':
        bot.send_message(message.chat.id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboard(main_menu))
        return
    try:
        delay = int(message.text)
        state.tasks['delay'] = delay
        bot.send_message(message.chat.id, f'‚è±Ô∏è –í–∞—à –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏: <b>{delay}</b> –º–∏–Ω—É—Ç.', parse_mode="html")
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n(<i>–ü—Ä–∏–º–µ—Ä:</i> <code>-1234567890123</code>)\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel", parse_mode="html")
        bot.register_next_step_handler(message, get_links, bot)
    except ValueError:
        bot.send_message(message.chat.id, '‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —á–∏—Å–ª–æ–º –≤ –º–∏–Ω—É—Ç–∞—Ö. –ù–∞–ø—Ä–∏–º–µ—Ä: <b>15</b>\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel', parse_mode="html")
        bot.register_next_step_handler(message, get_delay, bot)

def get_links(message, bot):
    if message.text == '/cancel':
        bot.send_message(message.chat.id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboard(main_menu))
        return

    links = message.text.splitlines()
    if not links_checker(message, bot, links, 'get'):
        bot.send_message(message.chat.id, "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.", parse_mode="html")
        bot.register_next_step_handler(message, get_links, bot)
    else:
        state.tasks['groups'] = links
        create_task_finish(message.chat.id, bot)

def links_checker(message, bot, links:list, flag):
    if not links or not any(link.strip() for link in links):
        bot.send_message(message.chat.id, '‚ùå –°–ø–∏—Å–æ–∫ ID –≥—Ä—É–ø–ø –ø—É—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω ID.')
        return False

    pattern = re.compile(r'^-\d+$')
    invalid_links = [link for link in links if not pattern.match(link)]

    if invalid_links:
        error_message = (
            'üö´ <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.</b>\n\n'
            'ID –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å ¬´-¬ª –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>-1234567890</code>).\n\n'
            '–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω—ã:\n' + 
            '\n'.join(f'‚Ä¢ <code>{link}</code>' for link in invalid_links)
        )
        bot.send_message(message.chat.id, error_message, parse_mode="html")
        return False

    formatted_links = '\n'.join([f'‚Ä¢ <code>{link}</code>' for link in links])
    
    if flag == 'get':
        success_message = f'‚úÖ <b>ID –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã:</b>\n\n{formatted_links}'
        bot.send_message(message.chat.id, success_message, parse_mode="html")
    elif flag == 'update':
        success_message = f'‚úÖ <b>ID –≥—Ä—É–ø–ø —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:</b>\n\n{formatted_links}'
        bot.send_message(message.chat.id, success_message, parse_mode="html")
        bot.send_message(message.chat.id, "‚öôÔ∏è –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=keyboard(settings_menu))
    return True

def create_task_finish(chat_id, bot):
    bot.send_message(chat_id, '‚úÖ <b>–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>', parse_mode="html")
    bot.send_message(chat_id, "‚öôÔ∏è –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –µ—ë –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É.", reply_markup=keyboard(settings_menu))

def update_notify(message, bot):
    if message.text == 'üîô–ù–∞–∑–∞–¥':
        bot.send_message(message.chat.id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboard(edit_menu))
        return
    state.tasks["msg"] = message.text
    bot.send_message(message.chat.id, f'–í–∞—à–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: <b>{message.text}</b>', parse_mode="html")
    bot.send_message(message.chat.id, "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=keyboard(edit_menu))

def update_delay(message, bot):
    if message.text == 'üîô–ù–∞–∑–∞–¥':
        bot.send_message(message.chat.id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboard(edit_menu))
        return
    try:
        delay = int(message.text)
        state.tasks["delay"] = delay
        bot.send_message(message.chat.id, f'–í–∞—à –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏: <b>{delay}</b> –º–∏–Ω—É—Ç', parse_mode="html")
        bot.send_message(message.chat.id, "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=keyboard(edit_menu))
    except ValueError:
        bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∏—Å–ª–æ–º')
        bot.register_next_step_handler(message, update_delay, bot)

def get_channel_info(bot, channel_id):
    try:
        chat = bot.get_chat(channel_id)
        title = chat.title
        return f"‚Ä¢ <b>{title}</b> (<code>{channel_id}</code>)"
    except Exception:
        return f"‚Ä¢ –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (<code>{channel_id}</code>)"

def show_notify(message, bot):
    if not state.tasks:
        bot.send_message(message.chat.id, 
            '‚ÑπÔ∏è –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á. –ù–∞–∂–º–∏—Ç–µ "‚ö°Ô∏è–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.', 
            reply_markup=keyboard(main_menu))
        return

    status = "–Ω–µ –∑–∞–ø—É—â–µ–Ω–∞"
    if state.broadcast_thread and state.broadcast_thread.is_alive():
        status = "—Ä–∞–±–æ—Ç–∞–µ—Ç"

    msg = state.tasks.get("msg", "<i>–Ω–µ –∑–∞–¥–∞–Ω–æ</i>")
    delay = state.tasks.get("delay", "<i>–Ω–µ –∑–∞–¥–∞–Ω–æ</i>")
    
    if "groups" in state.tasks and state.tasks["groups"]:
        group_infos = [get_channel_info(bot, group_id) for group_id in state.tasks["groups"]]
        groups_formatted = '\n'.join(group_infos)
    else:
        groups_formatted = "<i>–Ω–µ –∑–∞–¥–∞–Ω—ã</i>"

    task_details = (
        f'<b>–¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞:</b>\n\n'
        f'<b>–°—Ç–∞—Ç—É—Å:</b> {status}\n\n'
        f'üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{msg}\n\n'
        f'‚è±Ô∏è <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª:</b> {delay} –º–∏–Ω—É—Ç\n\n'
        f'üéØ <b>–ö–∞–Ω–∞–ª—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n{groups_formatted}'
    )
    bot.send_message(message.chat.id, task_details, parse_mode="html") 